//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;

public class TargetResolverRow : ITargetResolver
{
	// only used when the target is single
	private PCCharacter.RowPosition mRowPosition;	
	private BattleEntityManagerComponent mBattleEntityManager;
	
	/// <summary>
	/// For single targets
	/// </summary>
	/// <param name="targetEnum">Target enum.</param>
	/// <param name="entityManager">Entity manager.</param>
	public TargetResolverRow (PCCharacter.RowPosition rowPosition, BattleEntityManagerComponent manager)
	{
		mRowPosition = rowPosition;
		mBattleEntityManager = manager;
	}	

	public bool HasValidTargets (ICombatSkill skill)
	{
		foreach(BattleEntity entity in mBattleEntityManager.GetRow(mRowPosition)) {
			if(skill.TargetRule.IsValidTarget(entity)) {
				return true;
			}
		}
		return false;
	}
	
	public BattleEntity[] GetTargets(ICombatSkill skill) {
		List<BattleEntity> filteredEntities = new List<BattleEntity>();
		foreach(BattleEntity entity in mBattleEntityManager.GetRow(mRowPosition)) {
			if(skill.TargetRule.IsValidTarget(entity)) {
				filteredEntities.Add(entity);
			}
		}
		return filteredEntities.ToArray();
	}
}


