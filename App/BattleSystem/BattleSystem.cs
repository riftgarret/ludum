// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;


/// <summary>
/// System class to have references to all types of singleton type instances
/// </summary>

public class BattleSystem : IBattleService
{

	// singleton instance
	private static BattleSystem sSingleton;

	// private members to keep instantiated	    
    private IBattleService mService;

    /// <summary>
    /// To be called when the Service starts
    /// </summary>
    /// <param name="service"></param>
    public static void OnServiceStart(IBattleService service) {
        ((BattleSystem)Instance).mService = service;
    }

    /// <summary>
    /// Instance of the system control
    /// </summary>
    /// <returns></returns>
    public static IBattleService Instance {
        get {
            if (sSingleton == null) {
                sSingleton = new BattleSystem();
            }
            return sSingleton;
        }
	}

    /// <summary>
    /// To be called when the service goes out of scope
    /// </summary>
    public static void OnServiceDestroy() {
        ((BattleSystem)Instance).mService = null;
    }

    public void PostBattleEvent(IBattleEvent e) {
        if (mService != null) {
            mService.PostBattleEvent(e);
        }
    }

    public void PostActionRequired(BattleEntity entity) {
        if (mService != null) {
            mService.PostActionRequired(entity);
        }
    }

    public void ExecuteCombat(ICombatOperation combatOperation) {
        if (mService != null) {
            mService.ExecuteCombat(combatOperation);
        }
    }
}
