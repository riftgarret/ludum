<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Davfalcon</name>
    </assembly>
    <members>
        <member name="T:Davfalcon.BasicUnit">
            <summary>
            Implements basic unit functionality.
            </summary>
        </member>
        <member name="P:Davfalcon.BasicUnit.Name">
            <summary>
            Gets or sets the unit's name.
            </summary>
        </member>
        <member name="P:Davfalcon.BasicUnit.Class">
            <summary>
            Gets or sets the unit's class.
            </summary>
        </member>
        <member name="P:Davfalcon.BasicUnit.Level">
            <summary>
            Gets or sets the unit's level.
            </summary>
        </member>
        <member name="P:Davfalcon.BasicUnit.Stats">
            <summary>
            Gets a representation of the unit's stats.
            </summary>
        </member>
        <member name="P:Davfalcon.BasicUnit.StatsDetails">
            <summary>
            Gets a detailed breakdown of the unit's stats.
            </summary>
        </member>
        <member name="P:Davfalcon.BasicUnit.BaseStats">
            <summary>
            Gets an editable version of the unit's base stats.
            </summary>
        </member>
        <member name="P:Davfalcon.BasicUnit.Modifiers">
            <summary>
            Gets the unit's modifiers.
            </summary>
        </member>
        <member name="M:Davfalcon.BasicUnit.Initialize">
            <summary>
            Perform initial setup.
            </summary>
        </member>
        <member name="M:Davfalcon.BasicUnit.Link">
            <summary>
            Set internal object references
            </summary>
        </member>
        <member name="M:Davfalcon.BasicUnit.#ctor">
            <summary>
            Constructs a basic unit with no properties set.
            </summary>
        </member>
        <member name="T:Davfalcon.Collections.Generic.CircularLinkedList`1">
            <summary>
            Represents a list that can be circularly rotated in one direction.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="P:Davfalcon.Collections.Generic.CircularLinkedList`1.Current">
            <summary>
            Gets the object currently at the head of the list.
            </summary>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.Rotate">
            <summary>
            Moves the head of the list forward by one element.
            </summary>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.Rotate(System.Int32)">
            <summary>
            Moves the head of the list forward by the specified number of elements.
            </summary>
            <param name="steps">Number of elements to move the head.</param>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence relative to the current head.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item"/> relative to the current head, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element at the specified index relative to the current head.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted relative to the current head.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index relative to the current head.
            </summary>
            <param name="index">The zero-based index of the element to remove relative to the current head.</param>
        </member>
        <member name="P:Davfalcon.Collections.Generic.CircularLinkedList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index relative to the current head.
            </summary>
            <param name="index">The zero-based index of the element to get or set relative to the current head.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.Add(`0)">
            <summary>
            Adds an object to the end of the current list order.
            </summary>
            <param name="item">The object to be added to the end of the list.</param>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.Clear">
            <summary>
            Removes all elements from the list and resets the head.
            </summary>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the list; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the current list to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the list.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:Davfalcon.Collections.Generic.CircularLinkedList`1.Count">
            <summary>
            Gets the number of elements in the list.
            </summary>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object relative to the current head.
            </summary>
            <param name="item">The object to remove from the list.</param>
            <returns><c>true</c> if <paramref name="item"/> is successfully removed; otherwise, <c>false</c>. This method also returns <c>false</c> if <paramref name="item"/> was not found.</returns>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.AsReadOnly">
            <summary>
            Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> wrapper for the current collection.
            </summary>
            <returns>An object that acts as a read-only wrapper around the current list.</returns>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.Sort">
            <summary>
            Sorts the elements in the list using the default comparer and resets the head.
            </summary>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the list using the specified <see cref="T:System.Comparison`1"/> and resets the head.
            </summary>
            <param name="comparison"></param>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements using the specified comparer and resets the head.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.#ctor">
            <summary>
            Initializes a new empty <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1"/>.
            </summary>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.#ctor(`0)">
            <summary>
            Initializes a new <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1"/> and adds the specified item to it.
            </summary>
            <param name="item">The item to be added to the list.</param>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1"/> that contains elements copied from the specified collection.
            </summary>
            <param name="items">The collection whose elements are copied to the new <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1"/>.</param>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.WrapList(System.Collections.Generic.List{`0})">
            <summary>
            Creates a new <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1"/> that uses the specified <see cref="T:System.Collections.Generic.List`1"/> object as a base.
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to use as a base for the new <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1"/>.</param>
            <returns>A new <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1"/> with <paramref name="list"/> as the base.</returns>
        </member>
        <member name="T:Davfalcon.Collections.Generic.CircularLinkedList`1.CLLEnumerator">
            <summary>
            Enumerates the elements of a <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1"/>.
            </summary>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.CLLEnumerator.#ctor(Davfalcon.Collections.Generic.CircularLinkedList{`0})">
            <summary>
            Creates a new <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1.CLLEnumerator"/> for the specified <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1"/>.
            </summary>
            <param name="list">The <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1"/> to be enumerated by the new <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1.CLLEnumerator"/>.</param>
        </member>
        <member name="P:Davfalcon.Collections.Generic.CircularLinkedList`1.CLLEnumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.CLLEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:Davfalcon.Collections.Generic.CircularLinkedList`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Davfalcon.Collections.Generic.CircularLinkedList`1.CLLEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the current head of the list.
            </summary>
        </member>
        <member name="T:Davfalcon.Collections.Generic.ICircularLinkedList`1">
            <summary>
            Represents a list of objects with a head element that can be circularly rotated.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="P:Davfalcon.Collections.Generic.ICircularLinkedList`1.Current">
            <summary>
            Gets the object currently at the head of the list.
            </summary>
        </member>
        <member name="M:Davfalcon.Collections.Generic.ICircularLinkedList`1.Rotate">
            <summary>
            Moves the head of the list forward by one element.
            </summary>
        </member>
        <member name="M:Davfalcon.Collections.Generic.ICircularLinkedList`1.Rotate(System.Int32)">
            <summary>
            Moves the head of the list forward by the specified number of elements.
            </summary>
            <param name="steps">Number of elements to move the head.</param>
        </member>
        <member name="T:Davfalcon.Collections.Generic.ISelfRegistry`1">
            <summary>
            Exposes methods to register <see cref="T:Davfalcon.INameable"/> prototypes.
            </summary>
            <typeparam name="T">The type of prototypes in the registry.</typeparam>
        </member>
        <member name="M:Davfalcon.Collections.Generic.ISelfRegistry`1.Register(`0)">
            <summary>
            Add a new prototype to the registry. The prototype will be registered with its <see cref="P:Davfalcon.INameable.Name"/> property as the name.
            </summary>
            <param name="prototype">The prototype to be added to the registry.</param>
        </member>
        <member name="T:Davfalcon.Collections.Generic.IRegistry`1">
            <summary>
            Exposes methods to register and retrieve prototypes.
            </summary>
            <typeparam name="T">The type of prototypes in the registry.</typeparam>
        </member>
        <member name="M:Davfalcon.Collections.Generic.IRegistry`1.Register(`0,System.String)">
            <summary>
            Add a new prototype to the registry under a specified name.
            </summary>
            <param name="prototype">The prototype to be added to the registry.</param>
            <param name="name">The name to be associated with <paramref name="prototype"/>.</param>
        </member>
        <member name="M:Davfalcon.Collections.Generic.IRegistry`1.Get(System.String)">
            <summary>
            Gets a copy of the prototype by name.
            </summary>
            <param name="name">The name the prototype was registered with.</param>
            <returns>A copy of the prototype, if one was registered with <paramref name="name"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:Davfalcon.Collections.Generic.ManagedList`1">
            <summary>
            Convenience class to avoid repeated calls to <see cref="M:System.Collections.Generic.List`1.AsReadOnly"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Davfalcon.Collections.Generic.ManagedList`1.ReadOnly">
            <summary>
            Gets the read-only collection wrapper for the <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Davfalcon.Collections.Generic.ManagedList`1.#ctor">
            <summary>
            Initializes a new <see cref="T:Davfalcon.Collections.Generic.ManagedList`1"/>. Equivalent to <see cref="T:System.Collections.Generic.List`1"/> constructor.
            </summary>
        </member>
        <member name="T:Davfalcon.Collections.Generic.PrototypeCloner`1">
            <summary>
            Register prototypes to be cloned.
            </summary>
            <typeparam name="T">The type of prototypes in the registry.</typeparam>
        </member>
        <member name="M:Davfalcon.Collections.Generic.PrototypeCloner`1.Register(`0,System.String)">
            <summary>
            Add a new prototype to the registry under a specified name.
            </summary>
            <param name="prototype">The prototype to be added to the registry.</param>
            <param name="name">The name to be associated with <paramref name="prototype"/>.</param>
        </member>
        <member name="M:Davfalcon.Collections.Generic.PrototypeCloner`1.Get(System.String)">
            <summary>
            Gets a deep clone of the prototype by name.
            </summary>
            <param name="name">The name the prototype was registered with.</param>
            <returns>A deep clone of the prototype, if one was registered with <paramref name="name"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:Davfalcon.Collections.Generic.SelfRegisteredPrototypeCloner`1">
            <summary>
            Register <see cref="T:Davfalcon.INameable"/> prototypes to be cloned.
            </summary>
            <typeparam name="T">The type of prototypes in the registry.</typeparam>
        </member>
        <member name="M:Davfalcon.Collections.Generic.SelfRegisteredPrototypeCloner`1.Register(`0)">
            <summary>
            Add a new prototype to the registry. The prototype will be registered with its <see cref="P:Davfalcon.INameable.Name"/> property as the name.
            </summary>
            <param name="prototype">The prototype to be added to the registry.</param>
        </member>
        <member name="T:Davfalcon.IDescribable">
            <summary>
            Represents an object that has a description.
            </summary>
        </member>
        <member name="P:Davfalcon.IDescribable.Description">
            <summary>
            Gets the description of the object.
            </summary>
        </member>
        <member name="T:Davfalcon.IEditableDescription">
            <summary>
            Represents an object that has an editable description.
            </summary>
        </member>
        <member name="P:Davfalcon.IEditableDescription.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="T:Davfalcon.IEditableName">
            <summary>
            Represents an object that has an editable name.
            </summary>
        </member>
        <member name="P:Davfalcon.IEditableName.Name">
            <summary>
            Gets or sets the object's name.
            </summary>
        </member>
        <member name="T:Davfalcon.IEditableStatsModifier">
            <summary>
            Exposes properties to edit a modifier's stats.
            </summary>
        </member>
        <member name="P:Davfalcon.IEditableStatsModifier.Additions">
            <summary>
            Gets the values that this item will add to the unit's stats in an editable format.
            </summary>
        </member>
        <member name="P:Davfalcon.IEditableStatsModifier.Multiplications">
            <summary>
            Gets the multipliers that this item will apply to the unit's stats in an editable format.
            </summary>
        </member>
        <member name="T:Davfalcon.INameable">
            <summary>
            Represents an object that has a name.
            </summary>
        </member>
        <member name="P:Davfalcon.INameable.Name">
            <summary>
            Gets the object's name.
            </summary>
        </member>
        <member name="T:Davfalcon.IStatsModifier">
            <summary>
            Represents an object that modifies a unit's stats.
            </summary>
        </member>
        <member name="P:Davfalcon.IStatsModifier.Additions">
            <summary>
            Gets the values that this item will add to the unit's stats.
            </summary>
        </member>
        <member name="P:Davfalcon.IStatsModifier.Multiplications">
            <summary>
            Gets the multipliers that this item will apply to the unit's stats.
            </summary>
        </member>
        <member name="T:Davfalcon.MathExtensions">
            <summary>
            Extension methods for commonly performed math operations.
            </summary>
        </member>
        <member name="M:Davfalcon.MathExtensions.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a value to the specified bounds.
            </summary>
            <param name="value">The value to be clamped.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns><paramref name="min"/> if <paramref name="value"/> is less than <paramref name="min"/>; <paramref name="max"/> if <paramref name="value"/> is greater than <paramref name="max"/>; otherwise, <paramref name="value"/>.</returns>
        </member>
        <member name="M:Davfalcon.MathExtensions.Scale(System.Int32,System.Int32)">
            <summary>
            Scales a value by a factor.
            </summary>
            <param name="value">The value to be scaled.</param>
            <param name="factor">The factor to scale <paramref name="value"/> by. Treated as a percent increase when positive and as an inverse percent increase when negative.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:Davfalcon.MathExtensions.Cap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Takes a percent of a value then caps it to a maximum.
            </summary>
            <param name="value">The value to be capped.</param>
            <param name="cap">The flat cap.</param>
            <param name="percent">The percentage of <paramref name="value"/> to use.</param>
            <returns>The capped value.</returns>
        </member>
        <member name="T:Davfalcon.Randomization.CenterWeightedChecker">
            <summary>
            Check for success within a given threshold using a center weighted distribution.
            </summary>
        </member>
        <member name="M:Davfalcon.Randomization.CenterWeightedChecker.GenerateValue">
            <summary>
            Generates a new random value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Davfalcon.Randomization.CenterWeightedChecker.#ctor(System.Double)">
            <summary>
            Initializes a new <see cref="T:Davfalcon.Randomization.CenterWeightedChecker"/> with a specified threshold.
            </summary>
            <param name="threshold">The threshold to use.</param>
        </member>
        <member name="T:Davfalcon.Randomization.ISuccessCheck">
            <summary>
            Defines an interface for performing random success checks.
            </summary>
        </member>
        <member name="M:Davfalcon.Randomization.ISuccessCheck.Check">
            <summary>
            Performs a success check.
            </summary>
        </member>
        <member name="T:Davfalcon.Randomization.RandomBase">
            <summary>
            Abstract base class for generating random values.
            </summary>
        </member>
        <member name="P:Davfalcon.Randomization.RandomBase.Generator">
            <summary>
            Gets the singleton random number generator.
            </summary>
        </member>
        <member name="T:Davfalcon.Randomization.RandomInteger">
            <summary>
            Generate random integers.
            </summary>
        </member>
        <member name="M:Davfalcon.Randomization.RandomInteger.Get">
            <summary>
            Gets a new random integer within the set range.
            </summary>
            <returns>A new random integer.</returns>
        </member>
        <member name="M:Davfalcon.Randomization.RandomInteger.#ctor">
            <summary>
            Initializes a new <see cref="T:Davfalcon.Randomization.RandomInteger"/> with a range from 0 to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:Davfalcon.Randomization.RandomInteger.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:Davfalcon.Randomization.RandomInteger"/> with a range from 0 to the specified maximum value.
            </summary>
            <param name="max">The exclusive upper bound of the random integers that can be returned.</param>
        </member>
        <member name="M:Davfalcon.Randomization.RandomInteger.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Davfalcon.Randomization.RandomInteger"/> with a specified range.
            </summary>
            <param name="min">The inclusive lower bound of the random integers that can be returned.</param>
            <param name="max">The exclusive upper bound of the random integers that can be returned.</param>
        </member>
        <member name="T:Davfalcon.Randomization.SuccessChecker">
            <summary>
            Check for success within a given threshold. Random values under the threshold are considered a success.
            </summary>
        </member>
        <member name="M:Davfalcon.Randomization.SuccessChecker.GenerateValue">
            <summary>
            Generates a new random value.
            </summary>
            <returns>The new random value.</returns>
        </member>
        <member name="M:Davfalcon.Randomization.SuccessChecker.Check">
            <summary>
            Makes a new check.
            </summary>
            <returns><c>true</c> if the check was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Davfalcon.Randomization.SuccessChecker.#ctor(System.Double)">
            <summary>
            Initializes a new <see cref="T:Davfalcon.Randomization.SuccessChecker"/> with a specified threshold.
            </summary>
            <param name="threshold">The threshold to use.</param>
        </member>
        <member name="T:Davfalcon.TimedModifier">
            <summary>
            Implements a modifier with a timer.
            </summary>
        </member>
        <member name="P:Davfalcon.TimedModifier.Duration">
            <summary>
            Gets or sets the maximum duration for the modifier.
            </summary>
        </member>
        <member name="P:Davfalcon.TimedModifier.Remaining">
            <summary>
            Gets or sets the remaining time for the modifier.
            </summary>
        </member>
        <member name="M:Davfalcon.TimedModifier.Reset">
            <summary>
            Resets the remaining time to the duration.
            </summary>
        </member>
        <member name="M:Davfalcon.TimedModifier.Tick">
            <summary>
            Decrements the remaining time if it is greater than 0.
            </summary>
        </member>
        <member name="T:Davfalcon.ITimedModifier">
            <summary>
            Exposes properties, events, and functions for dynamic modifiers such as buffs and debuffs.
            </summary>
        </member>
        <member name="P:Davfalcon.ITimedModifier.Duration">
            <summary>
            Gets the total duration of the modifier.
            </summary>
        </member>
        <member name="P:Davfalcon.ITimedModifier.Remaining">
            <summary>
            Gets the remaining duration of the modifier.
            </summary>
        </member>
        <member name="M:Davfalcon.ITimedModifier.Reset">
            <summary>
            Resets the modifier's timer.
            </summary>
        </member>
        <member name="M:Davfalcon.ITimedModifier.Tick">
            <summary>
            Ticks the modifier. Call this on each time unit.
            </summary>
        </member>
        <member name="T:Davfalcon.IEditableStats">
            <summary>
            Exposes methods to access and edit stats.
            </summary>
        </member>
        <member name="P:Davfalcon.IEditableStats.Item(System.String)">
            <summary>
            Gets or sets a stat by string name.
            </summary>
            <param name="stat">The name of the stat.</param>
        </member>
        <member name="P:Davfalcon.IEditableStats.Item(System.Enum)">
            <summary>
            Gets or sets a stat by enum name.
            </summary>
            <param name="stat">The name of the stat.</param>
        </member>
        <member name="M:Davfalcon.IEditableStats.Set(System.String,System.Int32)">
            <summary>
            Sets a stat by string name.
            </summary>
            <param name="stat">The name of the stat.</param>
            <param name="value">The value of the stat.</param>
            <returns>This <see cref="T:Davfalcon.IEditableStats"/> instance. Used for chaining methods.</returns>
        </member>
        <member name="M:Davfalcon.IEditableStats.Set(System.Enum,System.Int32)">
            <summary>
            Sets a stat by enum name.
            </summary>
            <param name="stat">The name of the stat.</param>
            <param name="value">The value of the stat.</param>
            <returns>This <see cref="T:Davfalcon.IEditableStats"/> instance. Used for chaining methods.</returns>
        </member>
        <member name="T:Davfalcon.IStats">
            <summary>
            Exposes methods to access stats.
            </summary>
        </member>
        <member name="M:Davfalcon.IStats.Get(System.String)">
            <summary>
            Gets a stat by string name.
            </summary>
            <param name="stat">The name of the stat.</param>
            <returns>The value of the stat if it exists; otherwise, 0.</returns>
        </member>
        <member name="M:Davfalcon.IStats.Get(System.Enum)">
            <summary>
            Gets a stat by enum name.
            </summary>
            <param name="stat">The enum for the name of the stat.</param>
            <returns>The value of the stat if it exists; otherwise, 0.</returns>
        </member>
        <member name="P:Davfalcon.IStats.Item(System.String)">
            <summary>
            Gets a stat by string name.
            </summary>
            <param name="stat">The name of the stat.</param>
        </member>
        <member name="P:Davfalcon.IStats.Item(System.Enum)">
            <summary>
            Gets a stat by enum name.
            </summary>
            <param name="stat">The enum for the name of the stat.</param>
        </member>
        <member name="T:Davfalcon.IStatsCalculator">
            <summary>
            Specifies a formula to use to calculate stats
            </summary>
        </member>
        <member name="M:Davfalcon.IStatsCalculator.Calculate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform a calculation on the given parameters.
            </summary>
            <param name="a">Value to be added.</param>
            <param name="b">Value to be added.</param>
            <param name="m">Multiplication factor.</param>
        </member>
        <member name="T:Davfalcon.IStatsPackage">
            <summary>
            Shows different views of a unit's stats. Includes base stats, modifiers, and stats after modifiers are applied.
            </summary>
        </member>
        <member name="P:Davfalcon.IStatsPackage.Final">
            <summary>
            Gets the stats after modifiers are applied.
            </summary>
        </member>
        <member name="P:Davfalcon.IStatsPackage.Base">
            <summary>
            Gets the base stats.
            </summary>
        </member>
        <member name="P:Davfalcon.IStatsPackage.Additions">
            <summary>
            Gets the total additive modifiers.
            </summary>
        </member>
        <member name="P:Davfalcon.IStatsPackage.Multiplications">
            <summary>
            Gets the total multiplicative modifiers.
            </summary>
        </member>
        <member name="T:Davfalcon.IItem">
            <summary>
            Exposes basic properties of an item.
            </summary>
        </member>
        <member name="T:Davfalcon.IUnit">
            <summary>
            Exposes basic properties of a unit.
            </summary>
        </member>
        <member name="P:Davfalcon.IUnit.Name">
            <summary>
            Gets the unit's name.
            </summary>
        </member>
        <member name="P:Davfalcon.IUnit.Class">
            <summary>
            Gets the unit's class.
            </summary>
        </member>
        <member name="P:Davfalcon.IUnit.Level">
            <summary>
            Gets the unit's level.
            </summary>
        </member>
        <member name="P:Davfalcon.IUnit.Stats">
            <summary>
            Gets the unit's stats.
            </summary>
        </member>
        <member name="P:Davfalcon.IUnit.StatsDetails">
            <summary>
            Gets a breakdown of the unit's stats.
            </summary>
        </member>
        <member name="P:Davfalcon.IUnit.Modifiers">
            <summary>
            Gets the modifiers attached to the unit.
            </summary>
        </member>
        <member name="T:Davfalcon.IUnitModifier">
            <summary>
            Exposes properties of unit modifiers.
            </summary>
        </member>
        <member name="P:Davfalcon.IUnitModifier.Name">
            <summary>
            Gets the name of the modifier.
            </summary>
        </member>
        <member name="P:Davfalcon.IUnitModifier.Target">
            <summary>
            Gets the unit the object is modifying.
            </summary>
        </member>
        <member name="M:Davfalcon.IUnitModifier.Bind(Davfalcon.IUnit)">
            <summary>
            Binds the modifier to a new target.
            </summary>
            <param name="target">The new object to bind to.</param>
        </member>
        <member name="T:Davfalcon.IUnitModifierStack">
            <summary>
            Exposes methods to manage modifiers.
            </summary>
        </member>
        <member name="P:Davfalcon.IUnitModifierStack.Count">
            <summary>
            Gets the number of modifiers in this stack.
            </summary>
        </member>
        <member name="M:Davfalcon.IUnitModifierStack.Add(Davfalcon.IUnitModifier)">
            <summary>
            Adds a modifier to this stack.
            </summary>
            <param name="item">The modifier to be added.</param>
        </member>
        <member name="M:Davfalcon.IUnitModifierStack.Remove(Davfalcon.IUnitModifier)">
            <summary>
            Removes a modifier from this stack.
            </summary>
            <param name="item">The modifier to be removed.</param>
            <returns>True if the modifier was found; false otherwise.</returns>
        </member>
        <member name="M:Davfalcon.IUnitModifierStack.RemoveAt(System.Int32)">
            <summary>
            Removes the modifier at a given index.
            </summary>
            <param name="index">The index of the modifier to be removed.</param>
        </member>
        <member name="M:Davfalcon.IUnitModifierStack.Clear">
            <summary>
            Removes all modifiers from this stack.
            </summary>
        </member>
        <member name="T:Davfalcon.Serialization.Serializer">
            <summary>
            Performs functions relating to serialization.
            </summary>
        </member>
        <member name="M:Davfalcon.Serialization.Serializer.DeepClone(System.Object)">
            <summary>
            Makes a deep clone of an object.
            </summary>
            <param name="obj">The object to be cloned.</param>
            <returns>A deep clone of the object.</returns>
        </member>
        <member name="M:Davfalcon.Serialization.Serializer.WriteToFile(System.String,System.Object)">
            <summary>
            Writes an object to a file.
            </summary>
            <param name="path">The location and filename of the file.</param>
            <param name="obj">The object to be serialized.</param>
        </member>
        <member name="M:Davfalcon.Serialization.Serializer.TryWriteToFile(System.String,System.Object)">
            <summary>
            Write an object to a file. A return value indicates whether the serialization succeeded.
            </summary>
            <param name="path">The location and filename of the file.</param>
            <param name="obj">The object to be serialized.</param>
            <returns><c>true</c> if the serialization succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Davfalcon.Serialization.Serializer.ReadFromFile``1(System.String)">
            <summary>
            Reads an object from a file.
            </summary>
            <typeparam name="T">The type of the object being read.</typeparam>
            <param name="path">The location and filename of the file.</param>
            <returns>The deserialized object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Davfalcon.Serialization.Serializer.TryReadFromFile``1(System.String,``0@)">
            <summary>
            Reads an object from a file. A return value indicates whether the deserialization succeeded.
            </summary>
            <typeparam name="T">The type of the object being read.</typeparam>
            <param name="path">The location and filename of the file.</param>
            <param name="obj">When this method returns, contains the deserialized object of type <typeparamref name="T"/>
            if the deserialization succeeded, or the default value of <typeparamref name="T"/> if it failed.</param>
            <returns><c>true</c> if the serialization succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Davfalcon.Serialization.Serializer.CheckFile(System.String)">
            <summary>
            Checks if a file exists and can be read.
            </summary>
            <param name="path">The location and filename of the file.</param>
            <returns>True if the file was successfully accessed, false otherwise.</returns>
        </member>
        <member name="M:Davfalcon.Serialization.Serializer.ConvertToByteArray(System.Object)">
            <summary>
            Converts an object to a byte array.
            </summary>
            <param name="obj">The object to be converted.</param>
            <returns>A byte array containing the serialized data of the object.</returns>
        </member>
        <member name="M:Davfalcon.Serialization.Serializer.ConvertFromByteArray``1(System.Byte[])">
            <summary>
            Converts a byte array back to an object.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="buffer">A byte array containing the serialized data of the object.</param>
            <returns>The original object.</returns>
        </member>
        <member name="T:Davfalcon.StatsMath">
            <summary>
            Performs math across a set of stats.
            </summary>
        </member>
        <member name="M:Davfalcon.StatsMath.Get(System.String)">
            <summary>
            Gets the resulting stat after performing calculations.
            </summary>
            <param name="stat">The name of the stat.</param>
            <returns>The stat after calculations.</returns>
        </member>
        <member name="M:Davfalcon.StatsMath.#ctor(Davfalcon.IStats,Davfalcon.IStats,Davfalcon.IStats,Davfalcon.IStatsCalculator)">
            <summary>
            Initializes a new <see cref="T:Davfalcon.StatsMath"/> that will calculate using the specified stat operands and calculator.
            </summary>
            <param name="original">The original set of stats to use.</param>
            <param name="additions">A set of values to add to each stat.</param>
            <param name="multiplications">A set of values to multiply each stat.</param>
            <param name="calculator">An object that specifies the calculation formula to use. If not given or null, the default formula will be used.</param>
        </member>
        <member name="T:Davfalcon.StatsConstant">
            <summary>
            Returns a constant value for every stat.
            </summary>
        </member>
        <member name="M:Davfalcon.StatsConstant.Get(System.String)">
            <summary>
            Gets a stat by string name.
            </summary>
            <param name="stat">The name of the stat.</param>
            <returns>The constant value of the stat.</returns>
        </member>
        <member name="M:Davfalcon.StatsConstant.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:Davfalcon.StatsConstant"/> that returns a constant value for every stat.
            </summary>
            <param name="value">The constant value to return.</param>
        </member>
        <member name="F:Davfalcon.StatsConstant.Zero">
            <summary>
            A singleton instance of <see cref="T:Davfalcon.StatsConstant"/> that always returns 0.
            </summary>
        </member>
        <member name="F:Davfalcon.StatsConstant.One">
            <summary>
            A singleton instance of <see cref="T:Davfalcon.StatsConstant"/> that always returns 1.
            </summary>
        </member>
        <member name="T:Davfalcon.StatsPrototype">
            <summary>
            Abstract base class for <see cref="T:Davfalcon.IStats"/>.
            </summary>
        </member>
        <member name="M:Davfalcon.StatsPrototype.Get(System.String)">
            <summary>
            Gets a stat by string name.
            </summary>
            <param name="stat">The name of the stat.</param>
            <returns>The value of the stat if it exists; otherwise, 0.</returns>
        </member>
        <member name="M:Davfalcon.StatsPrototype.Get(System.Enum)">
            <summary>
            Gets a stat by enum name.
            </summary>
            <param name="stat">The name of the stat.</param>
            <returns>The value of the stat if it exists; otherwise, 0.</returns>
        </member>
        <member name="P:Davfalcon.StatsPrototype.Item(System.String)">
            <summary>
            Gets a stat by string name.
            </summary>
            <param name="stat">The name of the stat.</param>
        </member>
        <member name="P:Davfalcon.StatsPrototype.Item(System.Enum)">
            <summary>
            Gets a stat by enum name.
            </summary>
            <param name="stat">The enum for the name of the stat.</param>
        </member>
        <member name="T:Davfalcon.StatsMap">
            <summary>
            Implements data structure for stat lookup.
            </summary>
        </member>
        <member name="M:Davfalcon.StatsMap.Get(System.String)">
            <summary>
            Gets a stat by string name.
            </summary>
            <param name="stat">The name of the stat.</param>
            <returns>The value of the stat if it exists; otherwise, 0.</returns>
        </member>
        <member name="M:Davfalcon.StatsMap.Set(System.String,System.Int32)">
            <summary>
            Sets a stat by string name.
            </summary>
            <param name="stat">The name of the stat.</param>
            <param name="value">The value of the stat.</param>
            <returns>This <see cref="T:Davfalcon.IEditableStats"/> instance. Used for chaining methods.</returns>
        </member>
        <member name="M:Davfalcon.StatsMap.Set(System.Enum,System.Int32)">
            <summary>
            Sets a stat by enum name.
            </summary>
            <param name="stat">The name of the stat.</param>
            <param name="value">The value of the stat.</param>
            <returns>This <see cref="T:Davfalcon.IEditableStats"/> instance. Used for chaining methods.</returns>
        </member>
        <member name="P:Davfalcon.StatsMap.Item(System.String)">
            <summary>
            Gets or sets a stat by string name.
            </summary>
            <param name="stat">The name of the stat.</param>
        </member>
        <member name="P:Davfalcon.StatsMap.Item(System.Enum)">
            <summary>
            Gets a stat by enum name.
            </summary>
            <param name="stat">The enum for the name of the stat.</param>
        </member>
        <member name="T:Davfalcon.UnitModifier">
            <summary>
            Abstract base class for unit modifiers.
            </summary>
        </member>
        <member name="P:Davfalcon.UnitModifier.Name">
            <summary>
            Gets or sets the modifier's name.
            </summary>
        </member>
        <member name="P:Davfalcon.UnitModifier.Description">
            <summary>
            Gets or sets the modifier's description.
            </summary>
        </member>
        <member name="P:Davfalcon.UnitModifier.InterfaceUnit">
            <summary>
            Gets the <see cref="T:Davfalcon.IUnit"/> that will be presented as the unit.
            </summary>
        </member>
        <member name="P:Davfalcon.UnitModifier.Target">
            <summary>
            Gets the <see cref="T:Davfalcon.IUnit"/> the modifier is bound to.
            </summary>
        </member>
        <member name="M:Davfalcon.UnitModifier.Bind(Davfalcon.IUnit)">
            <summary>
            Binds the modifier to an <see cref="T:Davfalcon.IUnit"/>.
            </summary>
            <param name="target">The <see cref="T:Davfalcon.IUnit"/> to bind the modifier to.</param>
        </member>
        <member name="T:Davfalcon.UnitModifierStack">
            <summary>
            Manages a group of modifiers. Can function as a single modifier.
            </summary>
        </member>
        <member name="P:Davfalcon.UnitModifierStack.InterfaceUnit">
            <summary>
            Gets the <see cref="T:Davfalcon.IUnit"/> that will be presented as the unit.
            </summary>
        </member>
        <member name="P:Davfalcon.UnitModifierStack.Count">
            <summary>
            Gets the number of modifiers in the stack.
            </summary>
        </member>
        <member name="M:Davfalcon.UnitModifierStack.Bind(Davfalcon.IUnit)">
            <summary>
            Binds the stack to an <see cref="T:Davfalcon.IUnit"/>.
            </summary>
            <param name="target">The <see cref="T:Davfalcon.IUnit"/> to bind the stack to.</param>
        </member>
        <member name="M:Davfalcon.UnitModifierStack.Add(Davfalcon.IUnitModifier)">
            <summary>
            Adds an <see cref="T:Davfalcon.IUnitModifier"/> to the stack.
            </summary>
            <param name="item">The <see cref="T:Davfalcon.IUnitModifier"/> to be added to the stack.</param>
        </member>
        <member name="M:Davfalcon.UnitModifierStack.Remove(Davfalcon.IUnitModifier)">
            <summary>
            Removes a specific <see cref="T:Davfalcon.IUnitModifier"/> from the stack.
            </summary>
            <param name="item">The <see cref="T:Davfalcon.IUnitModifier"/> to remove from the stack.</param>
            <returns></returns>
        </member>
        <member name="M:Davfalcon.UnitModifierStack.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Davfalcon.IUnitModifier"/> at the specified index of the stack.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Davfalcon.IUnitModifier"/> to remove.</param>
        </member>
        <member name="M:Davfalcon.UnitModifierStack.Clear">
            <summary>
            Removes all modifiers from the stack.
            </summary>
        </member>
        <member name="T:Davfalcon.UnitStatsModifier">
            <summary>
            Modify a unit's stats.
            </summary>
        </member>
        <member name="P:Davfalcon.UnitStatsModifier.Additions">
            <summary>
            Gets or sets the values to be added to each stat.
            </summary>
        </member>
        <member name="P:Davfalcon.UnitStatsModifier.Multiplications">
            <summary>
            Gets or sets the values to be multiplied with each stat.
            </summary>
        </member>
        <member name="M:Davfalcon.UnitStatsModifier.Bind(Davfalcon.IUnit)">
            <summary>
            Binds the modifier to an <see cref="T:Davfalcon.IUnit"/>.
            </summary>
            <param name="target">The <see cref="T:Davfalcon.IUnit"/> to bind the modifier to.</param>
        </member>
        <member name="M:Davfalcon.UnitStatsModifier.#ctor">
            <summary>
            Initializes a new <see cref="T:Davfalcon.UnitStatsModifier"/> with no values set.
            </summary>
        </member>
    </members>
</doc>
